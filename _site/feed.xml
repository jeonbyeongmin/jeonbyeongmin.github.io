<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-31T20:43:30+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">JEON BYEONGMIN</title><subtitle>공부를 합시다</subtitle><author><name>전병민</name><email>qudals7613@gmail.com</email></author><entry><title type="html">Machine Learning 3 - Regression 알고리즘의 이해 - Microsoft Learning Platform MOOC</title><link href="http://localhost:4000/machine-learning-3-regression-microsoft-learning-platform-mooc/" rel="alternate" type="text/html" title="Machine Learning 3 - Regression 알고리즘의 이해 - Microsoft Learning Platform MOOC" /><published>2021-01-31T00:00:00+09:00</published><updated>2021-01-31T00:00:00+09:00</updated><id>http://localhost:4000/machine-learning-3-regression-microsoft-learning-platform-mooc</id><content type="html" xml:base="http://localhost:4000/machine-learning-3-regression-microsoft-learning-platform-mooc/">&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/JsIqJilmAj7883eHyY/giphy.gif&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음 주어진 문제의 공통점은 무엇일까?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;키에 따른 신발 사이즈&lt;/li&gt;
  &lt;li&gt;시간에 따른 커피 소비량&lt;/li&gt;
  &lt;li&gt;햇빛 노출 시간에 따른 주근깨 개수&lt;/li&gt;
  &lt;li&gt;달 위상에 따른 범죄 수&lt;/li&gt;
  &lt;li&gt;기온에 따른 쇼핑 장바구니의 물품 개수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;리그레션 알고리즘은 첫번째 포스트에서 설명했듯이 Supervised Learning이고 이에 따라 문제와 정답이 주어진다는 것을 다시 한번 생각하면서 시작한다. 앞서 적은 위 물음 정답은 전부 다 어떤 &lt;strong&gt;특정한 숫자를 예측하는 문제&lt;/strong&gt;라는 것이다. 사이즈, 소비량, 개수 이런 것들은 전부 어떤 숫자로 떨어지는 값이다. 이런 문제들을 해결하기 위해서 리그레션 알고리즘을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;simple-regression&quot;&gt;Simple Regression&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/FeatureAndLabel.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지난번 머신러닝을 이해하기 위해서 사용했던 수식이다. Feature에 해당하는 것이 독립 변수, Label에 해당하는 것이 독립변수에 영향을 받는 종속변수이다. 또한 그래프에서 기울기를 의미하는 것이 w이고 x가 0일때 즉, 초기값이 b인 것이다. 이 간단한 식이 바로 Simple Regression이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../img/mlp3-1.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지난 포스트에서 설명한 것처럼 위와 같은 데이터가 주어졌을 때 어떻게 y=wx+b 라는 식을 구할 수 있을까? 라는 질문이 바로 머신러닝이 해결하고자 하는 것이다. 우리는 저 점들을 모두 다 어느 정도는 만족시켜줄 수 있는 요정도의 그래프를 하나 임의로 그릴 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../img/mlp3-2.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 그래프가 그려졌을 때 우리는 기울기를 통해 w를, y절편을 이용하여 b를 구하여 y=wx+b 라는 식을 구해낼 수 가 있다. 말은 쉽지만 위 그림처럼 임의로 그려놓은 선이, 기울기가, y절편이 최적의 값일리가 없다. 그렇기 때문에 그것이 가장 중요한 이슈이고 최적의 값을 예측하기 위해서 가장 적절한 기울기와 가장 적절한 b를 계산할 필요가 있는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../img/mlp3-3.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우리가 원래 가지고 있던 데이터 값과 모델이 예측한 값을 비교해볼 수 있다. 주황색 점이 우리가 가지고 있던 데이터 값이고 파란색 점이 모델이 예측한 값이다. 당연히 이 차이가 작으면 작을수록 예측을 잘하는 모델이라는 것을 쉽게 알 수 있다. 단 마이너스 값이 나올 것을 고려하여 제곱하고 루트를 씌우거나 절대값을 씌우는 방법을 반드시 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>전병민</name><email>qudals7613@gmail.com</email></author><summary type="html"></summary></entry><entry><title type="html">Machine Learning 2 - Learning의 의미와 Data 이해 - Microsoft Learning Platform MOOC</title><link href="http://localhost:4000/mlp-machine-learning-2-learning-data/" rel="alternate" type="text/html" title="Machine Learning 2 - Learning의 의미와 Data 이해 - Microsoft Learning Platform MOOC" /><published>2021-01-27T00:00:00+09:00</published><updated>2021-01-27T00:00:00+09:00</updated><id>http://localhost:4000/mlp-machine-learning-2-learning-data</id><content type="html" xml:base="http://localhost:4000/mlp-machine-learning-2-learning-data/">&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/JsIqJilmAj7883eHyY/giphy.gif&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;머신러닝과 딥러닝은 모두 input data를 받아서 처리한 후에 머신러닝의 경우 전통적인 머신러닝 모델을, 딥러닝의 경우 뉴럴 네트워크를 활용해서 output을 만들어낸다. 이런 전반적인 흐름은 비슷하지만 머신러닝은 &lt;strong&gt;Feature Engineering을 하고&lt;/strong&gt;, 딥러닝은 &lt;strong&gt;Feature Extraction이 일어난다&lt;/strong&gt;는 차이가 있다.&lt;/p&gt;

&lt;p&gt;앞서 딥러닝이 머신러닝의 한 종류라고 했는데 이게 무슨 소리냐. Feature Engineering이라는 것은 사람이 여러개의 Feature가 있을 때 어떤 것이 최종 결과물에 영향을 미칠 지 고려해 가면서 변수를 조정하고 빼는 과정이고, Feature Extraction은 단어에서 미루어 짐작할 수 있듯이 Extraction 자체가 추출한다는 뜻이다. 그래서 이 추출하는 것은 사람이 뽑아내는 것이 아니라 기계가 Feature에서 바로 특징을 뽑아내는 것이기 때문에 사람은 Feature를 건들이지 않는다.&lt;/p&gt;

&lt;p&gt;즉, Feature Extraction은 사람이 해주어야하는 일을 자체적으로 모델이 해주는 것이기 때문에 사람의 손이 덜 가고 그 도메인에 대한 이해가 머신러닝에 비해서는 덜 필요로 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;feature-engineering&quot;&gt;Feature Engineering&lt;/h2&gt;

&lt;p&gt;Feature Engineering 이라는 것은 어떻게 할 수 있을까? 타이타닉호의 생존자와 사망자의 데이터를 가지고 예를 들어보자. 우리는 어떤 사람이 타이타닉호에 탑승했을 때 생존을 할 지 사망을 할 지 예측을 하고 싶다. 그러면 그 생존 여부에 영향을 미치는 데이터가 무엇일지, 영향을 미치지 않는 데이터는 또 무엇일지 생각해봐야 할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../img/titanic.jpg&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자, 그렇다면 데이터를 나열해보자. 먼저 이름이 주어졌다. 상식적으로 이름때문에 타이타닉호에서 살아남지 못했다고 말할 수는 없다. 그 다음 나이와 성별이 주어졌다. 여성과 저연령층, 고연령층은 추운 바다에서 오래 살아남을 확률이 적을 뿐더러, 만약 구조 작업 중에 노인이나 아이, 여성을 먼저 구하라는 지시가 있었다면 나이와 성별은 분명 유의미한 데이터이다. 선실의 등급 또한 높을수록 먼저 구조될 확률이 높았기 때문에 유의미한 데이터라 볼 수 있다.&lt;/p&gt;

&lt;p&gt;이렇게 각각의 데이터를 보면서 최종 결과물에 영향을 끼칠지 끼치지 않을지 생각하면서 데이터를 골라내는 작업이 바로 Feature Engineering이다. 그러면 우리는 이름은 제외하고 나이와 성별, 선실의 등급 등의 Feature만을 가지고 모델링을 할 수가 있을 것이다.&lt;/p&gt;

&lt;p&gt;하지만 이렇게 단순히 몇가지 Feature만 골래내는 작업을 한다고 하더라도 어느정도 시간이 걸리는 것을 알 수 있다. 데이터 하나하나 이것이 어떤 의미인지 생각해보고 결과물에 영향을 끼칠지 고려해봐야 하기 때문에 시간이 꽤 걸릴 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;feature--label&quot;&gt;Feature &amp;amp; Label&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/FeatureAndLabel.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우리나라에서 딥러닝, 머신러닝으로 굉장히 유명하신 김성은 교수님께서 위 수식만 이해하다면 누구나 다 머신러닝을 할 수 있다라고 말씀하셨다. X가 어떻게 변하냐에 따라 Y가 변하고 이 Y는 우리가 정답, 태그, 타겟, 레이블 등 다양한 이름으로 부르는데 일반적으로는 레이블이라고 가장 많이 이야기 하고 있다. 아무튼 우리는 X가 변하는 거에 따라서 Y가 어떻게 변하는지를 구하고 싶은 것이 목적이다.&lt;/p&gt;

&lt;p&gt;연차에 따른 연봉에 변화를 적은 표가 있다고 해보자. 물론 연봉의 변화가 연차 하나에만 영향을 받는 것은 아니지만 간단히 봤을 때 연차가 바로 Feature가 되는 것이고 연봉이 Lable이라고 말할 수 있다. 한가지 확실한 것은 연봉에 따라서 연차가 변하는 것이 아니라 연차에 따라서 연봉이 바뀐다는 것이다. 이것이 Feature와 Lable의 관계이다. Feature와 Lable을 가지고 좌표평면상에 데이터를 찍어 하나의 선을 그려볼 수 있을 것이다. 그럼 이 선에 따라서 우리는 나중에 모르는 X값을 추측하고 싶을 때 이 직선 값에 대입을 해서 모르는 Y값을 구할 수 있게 되는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../img/mlp2-3.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;X와 Y의 데이터를 여러개를 대입해보면 w와 b를 알 수 있다. 그럼 위 문제의 정답은 w =2이고 b = 1가 된다. 이런 식으로 주어진 데이터 여러개를 바탕으로 수식을 구해내는 이 작업을 머신러닝이 하는 것이다. 이렇게 수식이 간단한 경우에는 암산으로도 문제를 해결하겠지만 실제로는 데이터가 훨씬 더 복잡하고 양이 많다. 이때 머신러닝 모델이 하는 일이 바로 w, b를 구하는 것이고, 그 다음 하나의 수식이 나오면 x자리에 새로운 데이터 값을 집어 넣었을 때 y(결과값)가 얼마가 될지 예측을 할 수 있는 것이다. 우리가 머신러닝, 딥러닝 이렇게 러닝을 붙이는 것이 w와 b를 러닝 한다라고 이해하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;training-data--test-data&quot;&gt;Training Data &amp;amp; Test Data&lt;/h2&gt;

&lt;p&gt;데이터가 있으면 70%는 훈련 데이터 즉 기계를 학습시키기 위해서 사용하고, 나머지 30%는 기계가 얼마나 잘 학습했는지 테스트 했는지 확인해보기 위해서 사용한다. 이때 보통 데이터는 하나의 칼럼을 기준으로 순차 정렬이 되어 있는 경우가 많기 때문에 위에서부터 70%, 30%씩 나누면 특정 값 이상 부터는 기계가 한번도 학습해보지 못한 데이터가 존재할 수 있게 되는 것이다. 그래서 데이터를 다양하게 섞어서 쓸 수 있게 준비를 하는 랜덤 스플릿이라는 방법을 사용할 수 있다. 이렇게 데이터를 준비하고 잘 섞기만 하면 끝나냐. 그건 또 아니다. 주의해야 할 부분이 하나 더 있는데 바로 오버 피팅이라는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;overfitting&quot;&gt;Overfitting&lt;/h2&gt;

&lt;p&gt;머신러닝 딥러닝을 하다보면 오버 피팅이 일어나는 경우가 굉장히 많다. 그래서 오버 피팅을 피하기 위한 여러가지 시도를 한다. 그렇다면 오버 피팅이라는 것이 무엇일까?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../img/mlp2-4.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;필자는 옷에 대해서 관심이 아주 많은 편이다. 한국에서 옷을 넉넉하게 크게 입으면 흔히 ‘오버핏으로 입었다.’라고 표현을 하는데, 이는 잘못된 표현이다. 실제로는 옷을 나 뿐만 아니라 나보다 덩치가 큰 사람까지 입을 수 있게 입은 것을 Underfit이라고 부르고 자신에게 딱 맞게 입는 것을 Overfit이라고 말한다. 즉, 나에게 너무 딱 맞는 핏으로 만들다 보면 내가 아닌 다른 사람들은 절대 입지도 못하고 나도 조금만 살이 찌거나 빠지면 옷이 전혀 맞지 않는 상태가 되는 것이다. 그래서 양복을 맞출 때에도 오버핏으로 맞추기 보다는 내가 살이 찌거나 빠질 것을 감안하여 피팅을 하는 경우가 일반적이다. 머신러닝도 마찬가지이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../img/mlp2-5.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;데이터를 좌표평면 상에서 특정 점들의 집합으로 가지고 있다고 할 때 우리가 원하는 모델은 어느 데이터에나 잘 맞는 일반적인 모델이다. 그런데 가지고 있는 데이터들에 너무 치중돼서 학습을 하다 보면 오버 피팅이 일어나게 된다. 위 그림에서 첫번째 그래프를 보면 자연스럽게 모델이 만들어진 반면 오버 피팅이 일어난 경우는 그래프가 주어진 데이터에 너무 최적화되기 위해서 이상하게 꺾이는 것이 생기는 것이다. 이것을 바로 오버 피팅이라고 한다.&lt;/p&gt;

&lt;p&gt;오버 피팅이 일어난다는 게 무슨 의미일까? 오버 피팅이 일어나면 우리가 가지고 있는 훈련 데이터에 대해서는 100%의 정확도를 보일 것이다. 하지만 우리가 가지고 있지 않은 일반적인 데이터를 넣었을 때 그 때에도 결과값이 제대로 나올 수 있을까? 아무래도 좀 이상하게 나올 것이다. 그렇기 때문에 오버 피팅을 주의해야 한다.&lt;/p&gt;

&lt;p&gt;우리는 오버 피팅을 어떻게 피할 수 있을까? 일단 데이터가 적은 경우에 오버 피팅이 많이 일어난다. 그래서 데이터를 많이 준비할 수 있으면 데이터를 많이 준비하는 것이 좋고, 만약 데이터를 충분히 많이 모을 수 없는 경우에는 &lt;strong&gt;Data Augmentation&lt;/strong&gt;이라는 작업을 할 수 있다. 데이터 부풀리기라는 뜻이고 이미지 학습에 많이 사용하고 있다. 또한 알고리즘 중에서 오버 피팅이 잘 일어나지 않는 알고리즘을 선택해서 학습을 시킬 수도 있을 것이고 그 외에 Regularization(규제화)라는 값을 추가하거나 Dropout이라는 것을 추가할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;머신러닝-workflow&quot;&gt;머신러닝 Workflow&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;어떤 문제를 풀기 위해서 머신러닝을 하려고 하는지 &lt;strong&gt;문제를 정의&lt;/strong&gt;한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;문제를 풀 수 있도록 Training set과 Test set으로 나눠 &lt;strong&gt;Data set을 준비&lt;/strong&gt;한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어떤 알고리즘으로 어떤 모델로 데이터를 학습 시킬 것인지 &lt;strong&gt;모델을 설정&lt;/strong&gt;한다. 만약 내가 Classification을 하겠다면 그걸 풀기 위해서 svm 할지 의사 결정 트리를 사용할지 그런 것들을 설정하는 것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;훈련과 평가를 여러번 거친 다음 어떤 모델로 만든 것이 가장 좋구나라는 게 판단이 되면 그 모델을 활용하게 되는 것이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name>전병민</name><email>qudals7613@gmail.com</email></author><summary type="html"></summary></entry><entry><title type="html">Machine Learning 1 - 개요 - Microsoft Learning Platform MOOC</title><link href="http://localhost:4000/machine-learning-1-microsoft-learning-platform-mooc/" rel="alternate" type="text/html" title="Machine Learning 1 - 개요 - Microsoft Learning Platform MOOC" /><published>2020-12-29T00:00:00+09:00</published><updated>2020-12-29T00:00:00+09:00</updated><id>http://localhost:4000/machine-learning-1-microsoft-learning-platform-mooc</id><content type="html" xml:base="http://localhost:4000/machine-learning-1-microsoft-learning-platform-mooc/">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Microsoft Learning Platform에 게시되어 있는 MS 소속 전미정님의 동영상 강의를 기반으로 작성하였다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/JsIqJilmAj7883eHyY/giphy.gif&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;인공지능은 인간을 본떠서 만든 기술을 의미하고 이 인공지능을 구현하기 위한 방법 중 하나가  바로 &lt;strong&gt;머신러닝&lt;/strong&gt;이다. 머신러닝은 사람처럼 데이터를 수집해서 학습하도록 하는 것이다. 머신러닝을 구현하는 알고리즘에는 로지스틱 리그레션, 결정트리, 서포트 벡터 머신 등 다양한 알고리즘이 존재한다. 그 중 인공신경망을 사용하는 방법이 &lt;strong&gt;딥 러닝&lt;/strong&gt;이다. 즉 머신러닝은 인공지능을 구현하기 위한 방법 중 하나이고 머신러닝을 구현하기 위한 알고리즘 중 하나가 바로 딥 러닝(Neural Network)인 것이다. 최근에는 딥러닝을 활용해서 이미지 인식이나, 감정분석, 자연어 처리까지도 모두 엄청나게 뛰어난 성능을 보이고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;머신러닝&quot;&gt;머신러닝&lt;/h2&gt;

&lt;p&gt;기계와 컴퓨터에게 데이터를 제공해주고 그 데이터를 학습하게 하는 방법이다. 머신러닝에서는 데이터가 필수적이다. 따라서 머신러닝을 도입하기 위해서는 기계를 학습 시킬 데이터를 필수적으로 가지고 있어야 한다.&lt;/p&gt;

&lt;p&gt;가령 input으로 a와 b가 주어졌다고 생각을 해보자. 일반적인 컴퓨터 사이언스의 경우 a와 b를 주면서 동시에 +를 하라는 프로그래밍 명령을 함께 제공한다. 그럼 컴퓨터는 a와 b의 더하기 연산을 해서 a+b의 결과를 사용자에게 보여준다.&lt;/p&gt;

&lt;p&gt;하지만 머신러닝의 경우 a와 b의 input이 똑같이 주어지지만 이전처럼 +명령어를 제공하지 않는다. 대신 c라는 최종 결과물을 주게되는 것이다. 이를 줌으로써 내부에서 어떤일이 일어나는지 그 프로그래밍을 찾게 하는 게 바로 머신러닝의 원리이다.&lt;/p&gt;

&lt;p&gt;a와 b가 input으로 주어졌는데 어떻게 c가 나올 수 있을까? 그 해답이 바로 데이터이다. 다양하고 많은 데이터 주어지면 컴퓨터가 내부에서 +함수가 작용하고 있다는 것을 추측할 수 있게 되는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;전통적인-컴퓨터-사이언스-vs-머신러닝&quot;&gt;전통적인 컴퓨터 사이언스 VS 머신러닝&lt;/h2&gt;

&lt;p&gt;필자는 고양이를 아주 좋아하는데 위 두가지 방법으로 고양이 이미지를 분석할 수 있다. 전통적인 컴퓨터 사이언스에서는 고양이 생김새의 특징을 잡아내어 패턴을 만든다. 얼굴이 동그랗고 귀가 뾰족한 것을 알아내어 하나의 마스크를 만드는 것이다. 그리고 만약 다른 동물들에게 이 마스크를 씌웠을 때 동물의 생김새가 이 마스크와 유사하면 고양이라고 판단을 하고 그렇지 않으면 고양이가 아니라고 판단할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;하지만 이 방법에는 문제가 있다. 모든 고양이가 귀가 뾰족한 것은 아니기 때문에 정확성 측면에서 성능이 매우 좋지 않다는 것이다.&lt;/p&gt;

&lt;p&gt;하지만 머신러닝을 활용하게 된다면 이러한 경우에도 고양이인지 아닌지 판단할 수 있게 된다. 구할 수 있는 모든 고양이 사진을 기계에게 학습시켜 컴퓨터가 다양한 고양이 이미지를 보면서 ‘고양이라는 것이 대체적으로 어떤 모습을 하고 있구나’ 라는 것을 판단할 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;머신러닝의-종류&quot;&gt;머신러닝의 종류&lt;/h2&gt;

&lt;p&gt;머신러닝에는 매우 다양한 방법이 존재한다. 다시 말해 기계에게 어떻게 학습시킬 것인지 결정하는 방법이 굉장히 많다는 것이다. 그 중 눈여겨 봐야할 것은 &lt;em&gt;Supervised Learning, Unsupervised Learning, Reinforcement Learning&lt;/em&gt; 이 세 가지이다.&lt;/p&gt;

&lt;h3 id=&quot;1-supervised-learning-지도-학습&quot;&gt;1. Supervised Learning (지도 학습)&lt;/h3&gt;

&lt;p&gt;가장 널리 연구되고 있는 분야이며 보통 성능이 가장 높게 나온다.  Supervised Learing의 경우 문제와 문제의 답(Feature &amp;amp; Lable)을 함께 제공한다. 가령 앞서 예시로 들었던 고양이 이미지 분석에서 학습을 시킬 때 고양이 이미지를 제공하면서 이것이 모두 고양이 사진이라는 것을 하나하나 꼬리표를 달아 표시해두는 것이다. 이것이 학습에 유리한 이유는 이렇게 답지가 존재하기 때문이다.&lt;/p&gt;

&lt;p&gt;사람도 어떤 공부를 할 때 답지가 있다면 문제가 맞았는지 틀렸는지 정확하게 알아볼 수 있는 것과 비슷한 맥락이다. 이것은 다른 종류의 머신러닝과의 가장 큰 차이점이라고 볼 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Regression : 예측 (ex 시간에 따른 커피 소비량 예측)&lt;/li&gt;
  &lt;li&gt;Forecast : 추정&lt;/li&gt;
  &lt;li&gt;Classification : 분류 (ex 고양이와 강아지의 분류)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-unsupervised-learning-비지도-학습&quot;&gt;2. Unsupervised Learning (비지도 학습)&lt;/h3&gt;

&lt;p&gt;지도 학습과 다르게 문제만 제공을 한다. Feature만 있고 Lable은 없는 것이다. 해답이 없는데 어떻게 학습을 시킬 수 있을까? Unsupervised Learning은 예측, 추정, 분류가 아닌 패턴이나 구조를 발견하고 비슷한 것끼리 묶는 식의 그룹화를 할 때 사용한다.&lt;/p&gt;

&lt;p&gt;예를 들어 시간에 따라 변화하는 값이 주어진다고 할 때, 평소에는 비슷한 변화량을 가지다가 갑자기 급격하게 변하는 경우가 있을 것이다. 이런 경우 하나하나 레이블링을 하지 않아도 평소와는 다른 데이터가 주어졌다는 것을 패턴으로 찾아낼 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;Clustering 문제도 Unsupervised Learnging 알고리즘으로 해결할 수 있다. 만약 사과, 바나나, 포도가 주어졌을 때 이 알고리즘을 사용하면 비슷한 모양을 가진 것끼리 그룹화를 해줄 수 있는 것이다. 따라서 각각의 그룹이 무슨 과일을 묶은 것인지는 기계는 알지 못하지만 비슷한 것끼리 묶어서 모은다는 점에서 의미가 있는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;3-reinforcement-learning-강화-학습&quot;&gt;3. Reinforcement Learning (강화 학습)&lt;/h3&gt;

&lt;p&gt;정답을 주는 것이 아니라 보상을 제공하는 것이다. 어떤 액션을 취했을 그것이 잘한 액션이면 플러스 점수를 부여하고 그렇지 않은 액션이었으면 마이너스 점수를 부여하는 것이다. 최종 목표는 높은 점수를 따게 하는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;인과관계가 중요하고, 게임이나 로봇을 학습시킬 때 사용할 수 있다. 그 유명한 알파고가 이 알고리즘을 사용하였다. 특히 게임에서 모션 캡처를 통해 사람의 움직임을 따라 할 때도 점수를 부여해서 최대한 비슷한 움직임을 보일 수 있도록 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;딥-러닝&quot;&gt;딥 러닝&lt;/h2&gt;

&lt;p&gt;머신러닝은 정말 여러가지 알고리즘 방법을 가지고 있다. 어떤 알고리즘을 어떤 문제를 풀 때 사용할 지가 중요하다.&lt;/p&gt;

&lt;p&gt;앞서 언급했던 것 처럼 딥 러닝(Deep Learning)은 머신 러닝의 한 종류인데, Neural Network 알고리즘이 바로 딥 러닝이다. Supervised Learing에서 사람이 공부를 할 때 답지가 있으면 맞고 틀리는 것이 더 정확해진다고 예시를 들었었다. 이것처럼 기계를 학습시킬 때에는 사람에게 하는 것과 유사한 부분이 많다.&lt;/p&gt;

&lt;p&gt;특히 컴퓨터에 사람의 뇌와 비슷한 구조를 만들어 준것이 인공 신경망이고 뉴런을 본따 만든 것이 인공 신경이다. 이 인공 신경 노드가 있으면 주변에서 입력을 받아서 신경망에서 처리한 다음 출력하게 되는 방식이다. 인공 신경망들을 여러 층 쌓아서 만든 것이 다름 아닌 &lt;strong&gt;딥 러닝&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name>전병민</name><email>qudals7613@gmail.com</email></author><summary type="html"></summary></entry></feed>